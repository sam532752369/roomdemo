package ${package.Controller};

import org.springframework.web.bind.annotation.*;

import org.springframework.web.bind.annotation.RequestMapping;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.beans.factory.annotation.Autowired;

import ${package.Service}.${table.serviceName};
import com.onefun.util.JSONResult;
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.*;
/**
 *code is far away from bug with the animal protecting
 *　　
 *   @description : ${entity} 控制器
 *   ---------------------------------
 * 	 @author ${author}
 *   @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@Api(value="#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", description="${entity} 控制器")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} ${table.entityPath}Service;

    /**
     * @description : 通过id获取${entity}
     * ---------------------------------
     * @author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping("/get${entity}ById")
    @ApiOperation(value="通过id获取${entity}", notes="通过id获取${entity}")
    @ApiImplicitParam(name = "id", paramType="query", value = "${entity}ID", dataType="integer", required = true)
    public JSONResult<${entity}> get${entity}ById(Integer id) throws Exception{
            JSONResult<${entity}> resJson = new JSONResult<>();
            ${entity} param= ${table.entityPath}Service.selectOneByObj(id);
            resJson.setData(param);
            resJson.setStatus(0);
            return resJson;
    }

    /**
     * @description : 通过id删除${entity}
     * ---------------------------------
     * @author : ${author}
     * @since : Create in ${date}
     */
    @GetMapping("/delete${entity}ById")
    @ApiOperation(value="通过id删除${entity}", notes="通过id删除${entity}")
    @ApiImplicitParam(name = "id", paramType="query", value = "${entity}ID", dataType="integer", required = true)
    public JSONResult<${entity}> delete${entity}ById(Integer id) throws Exception{
            JSONResult<${entity}> resJson = new JSONResult<>();
            boolean boo=${table.entityPath}Service.deleteById(id);
            resJson.setStatus(boo?0:1);
            return resJson;
    }

    /**
     * @description : 通过id更新${entity}
     * ---------------------------------
     * @author : ${author}
     * @since : Create in ${date}
     */
    @PostMapping("/update${entity}ById")
    @ApiOperation(value="通过id更新${entity}", notes="通过id更新${entity}")
    public JSONResult<${entity}> update${entity}ById(@ApiParam(name="${entity}",value="${entity} 实体类") @RequestBody ${entity} param) throws Exception{
            JSONResult<${entity}> resJson = new JSONResult<>();
            boolean boo=${table.entityPath}Service.updateById(param);
            resJson.setStatus(boo?0:1);
            return resJson;
    }

    /**
     * @description : 添加${entity}
     * ---------------------------------
     * @author : ${author}
     * @since : Create in ${date}
     */
	@PostMapping("/add${entity}")
    @ApiOperation(value="添加${entity}", notes="添加${entity}")
    public JSONResult<${entity}> add${entity}(@ApiParam(name="${entity}",value="${entity} 实体类") @RequestBody ${entity} param) throws Exception{
            JSONResult<${entity}> resJson = new JSONResult<>();
            boolean boo=${table.entityPath}Service.insert(param);
            resJson.setStatus(boo?0:1);
            return resJson;
    }
}
